// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CMS.Infrastructure.Configurations.Models;

public partial class CMSDatabaseContext : DbContext
{
    public CMSDatabaseContext(DbContextOptions<CMSDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AcronymTriGram> AcronymTriGrams { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Application> Applications { get; set; }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<Content> Contents { get; set; }

    public virtual DbSet<ContentRelatedLink> ContentRelatedLinks { get; set; }

    public virtual DbSet<ContentRelatedTerm> ContentRelatedTerms { get; set; }

    public virtual DbSet<ContentRevision> ContentRevisions { get; set; }

    public virtual DbSet<ContentRevisionDetail> ContentRevisionDetails { get; set; }

    public virtual DbSet<ContentRevisionFeedback> ContentRevisionFeedbacks { get; set; }

    public virtual DbSet<ContentStatus> ContentStatuses { get; set; }

    public virtual DbSet<ContentTitleTriGram> ContentTitleTriGrams { get; set; }

    public virtual DbSet<ContentType> ContentTypes { get; set; }

    public virtual DbSet<CountryCode> CountryCodes { get; set; }

    public virtual DbSet<GeoData> GeoDatas { get; set; }

    public virtual DbSet<HeaderSpiderList> HeaderSpiderLists { get; set; }

    public virtual DbSet<HelpHierarchy> HelpHierarchies { get; set; }

    public virtual DbSet<HelpPage> HelpPages { get; set; }

    public virtual DbSet<HelpPhoto> HelpPhotoes { get; set; }

    public virtual DbSet<HomePage> HomePages { get; set; }

    public virtual DbSet<ImageMeta> ImageMetas { get; set; }

    public virtual DbSet<Link> Links { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MetroCode> MetroCodes { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Plagiarism> Plagiarisms { get; set; }

    public virtual DbSet<PlagiarismDetail> PlagiarismDetails { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<ProfileOption> ProfileOptions { get; set; }

    public virtual DbSet<ProfileSerial> ProfileSerials { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Quote> Quotes { get; set; }

    public virtual DbSet<RegionCode> RegionCodes { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<SearchLog> SearchLogs { get; set; }

    public virtual DbSet<SearchTypeLog> SearchTypeLogs { get; set; }

    public virtual DbSet<StyleError> StyleErrors { get; set; }

    public virtual DbSet<StyleGuide> StyleGuides { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TagNameTriGram> TagNameTriGrams { get; set; }

    public virtual DbSet<TagRelatedTag> TagRelatedTags { get; set; }

    public virtual DbSet<TagSynonym> TagSynonyms { get; set; }

    public virtual DbSet<Term> Terms { get; set; }

    public virtual DbSet<TermOfDay> TermOfDays { get; set; }

    public virtual DbSet<TermSynonym> TermSynonyms { get; set; }

    public virtual DbSet<Tutorial> Tutorials { get; set; }

    public virtual DbSet<TutorialDetail> TutorialDetails { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<ViewDetail> ViewDetails { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AcronymTriGram>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.NgramId });

            entity.Property(e => e.NgramId).HasColumnName("NGramId");
            entity.Property(e => e.Ngram)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NGram");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.AddressId).ValueGeneratedOnAdd();
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Company).HasMaxLength(50);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PostalCode).HasMaxLength(15);
            entity.Property(e => e.Province).HasMaxLength(50);

            entity.HasOne(d => d.User).WithOne(p => p.Address)
                .HasForeignKey<Address>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Address_t_User");
        });

        modelBuilder.Entity<Application>(entity =>
        {
            entity.Property(e => e.ApplicationId).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.HasIndex(e => e.UserUserId, "IX_FK_t_Article_t_User");

            entity.Property(e => e.ContentId).ValueGeneratedNever();
            entity.Property(e => e.Body)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Outline).IsUnicode(false);
            entity.Property(e => e.Takeaway).IsUnicode(false);
            entity.Property(e => e.UserUserId).HasColumnName("User_UserId");

            entity.HasOne(d => d.Content).WithOne(p => p.Article)
                .HasForeignKey<Article>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Article_t_Content");

            entity.HasOne(d => d.UserUser).WithMany(p => p.Articles)
                .HasForeignKey(d => d.UserUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Article_t_User");
        });

        modelBuilder.Entity<Content>(entity =>
        {
            entity.HasIndex(e => e.ImageId, "IX_FK_Content_Image");

            entity.HasIndex(e => e.ContentTypeContentTypeId, "IX_FK_t_Content_t_ContentType");

            entity.HasIndex(e => e.ContentStatusContentStatusId, "IX_FK_t_Content_t_Status");

            entity.HasIndex(e => e.PrimaryTag, "IX_FK_t_Content_t_Tag");

            entity.HasIndex(e => e.UserAssignedToUserId, "IX_FK_t_Content_t_User");

            entity.HasIndex(e => e.UserLockedByUserId, "IX_FK_t_Content_t_UserLocked");

            entity.Property(e => e.ChangeFreq).HasMaxLength(50);
            entity.Property(e => e.ContentStatusContentStatusId).HasColumnName("ContentStatus_ContentStatusId");
            entity.Property(e => e.ContentTypeContentTypeId).HasColumnName("ContentType_ContentTypeId");
            entity.Property(e => e.Cost).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.HtmlTitle)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.HtmltitleOverride).HasColumnName("HTMLTitleOverride");
            entity.Property(e => e.LastEditDate).HasColumnType("datetime");
            entity.Property(e => e.LockedDate).HasColumnType("datetime");
            entity.Property(e => e.MetaDescription)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MetaKeywords)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PublishedDate).HasColumnType("datetime");
            entity.Property(e => e.RevisitDate).HasColumnType("datetime");
            entity.Property(e => e.Sources).IsUnicode(false);
            entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UserAssignedToUserId).HasColumnName("UserAssignedTo_UserId");
            entity.Property(e => e.UserLockedByUserId).HasColumnName("UserLockedBy_UserId");

            entity.HasOne(d => d.ContentStatusContentStatus).WithMany(p => p.Contents)
                .HasForeignKey(d => d.ContentStatusContentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_t_Status");

            entity.HasOne(d => d.ContentTypeContentType).WithMany(p => p.Contents)
                .HasForeignKey(d => d.ContentTypeContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_t_ContentType");

            entity.HasOne(d => d.Image).WithMany(p => p.Contents)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_Content_Image");

            entity.HasOne(d => d.PrimaryTagNavigation).WithMany(p => p.Contents)
                .HasForeignKey(d => d.PrimaryTag)
                .HasConstraintName("FK_t_Content_t_Tag");

            entity.HasOne(d => d.UserAssignedToUser).WithMany(p => p.ContentUserAssignedToUsers)
                .HasForeignKey(d => d.UserAssignedToUserId)
                .HasConstraintName("FK_t_Content_t_User");

            entity.HasOne(d => d.UserLockedByUser).WithMany(p => p.ContentUserLockedByUsers)
                .HasForeignKey(d => d.UserLockedByUserId)
                .HasConstraintName("FK_t_Content_t_UserLocked");

            entity.HasMany(d => d.TagsTags).WithMany(p => p.ContentContents)
                .UsingEntity<Dictionary<string, object>>(
                    "TContentTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_Content_Tag_t_Tag"),
                    l => l.HasOne<Content>().WithMany()
                        .HasForeignKey("ContentContentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_Content_Tag_t_Content"),
                    j =>
                    {
                        j.HasKey("ContentContentId", "TagsTagId");
                        j.ToTable("t_Content_Tag");
                        j.HasIndex(new[] { "TagsTagId" }, "IX_FK_t_Content_Tag_t_Tag");
                        j.IndexerProperty<int>("ContentContentId").HasColumnName("Content_ContentId");
                        j.IndexerProperty<int>("TagsTagId").HasColumnName("Tags_TagId");
                    });
        });

        modelBuilder.Entity<ContentRelatedLink>(entity =>
        {
            entity.HasIndex(e => e.ContentId, "IX_FK_t_Content_RelatedLink_t_Content");

            entity.HasIndex(e => e.LinkId, "IX_FK_t_Content_RelatedLink_t_Link");

            entity.HasOne(d => d.Content).WithMany(p => p.ContentRelatedLinks)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_RelatedLink_t_Content");

            entity.HasOne(d => d.Link).WithMany(p => p.ContentRelatedLinks)
                .HasForeignKey(d => d.LinkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_RelatedLink_t_Link");
        });

        modelBuilder.Entity<ContentRelatedTerm>(entity =>
        {
            entity.HasIndex(e => e.ContentId, "IX_FK_t_Content_RelatedTerm_t_Content");

            entity.HasIndex(e => e.TermId, "IX_FK_t_Content_RelatedTerm_t_Term");

            entity.HasOne(d => d.Content).WithMany(p => p.ContentRelatedTerms)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_RelatedTerm_t_Content");

            entity.HasOne(d => d.Term).WithMany(p => p.ContentRelatedTerms)
                .HasForeignKey(d => d.TermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_RelatedTerm_t_Term");
        });

        modelBuilder.Entity<ContentRevision>(entity =>
        {
            entity.HasKey(e => e.TermRevisionId);

            entity.HasIndex(e => e.StatusContentStatusId, "IX_FK_t_ContentRevision_t_Status");

            entity.HasIndex(e => e.ContentContentId, "IX_FK_t_ContentRevision_t_Term");

            entity.Property(e => e.AssignedTo).HasMaxLength(200);
            entity.Property(e => e.ContentContentId).HasColumnName("Content_ContentId");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.EditedBy)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Note)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RevisionCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StatusContentStatusId).HasColumnName("Status_ContentStatusId");

            entity.HasOne(d => d.ContentContent).WithMany(p => p.ContentRevisions)
                .HasForeignKey(d => d.ContentContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_ContentRevision_t_Term");

            entity.HasOne(d => d.StatusContentStatus).WithMany(p => p.ContentRevisions)
                .HasForeignKey(d => d.StatusContentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_ContentRevision_t_Status");
        });

        modelBuilder.Entity<ContentRevisionDetail>(entity =>
        {
            entity.HasKey(e => new { e.TermRevisionId, e.FieldName });

            entity.Property(e => e.FieldName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewValue).IsUnicode(false);
            entity.Property(e => e.OldValue).IsUnicode(false);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.TermRevision).WithMany(p => p.ContentRevisionDetails)
                .HasForeignKey(d => d.TermRevisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_ContentRevisionDetail_t_ContentRevision");
        });

        modelBuilder.Entity<ContentRevisionFeedback>(entity =>
        {
            entity.HasKey(e => e.TermRevisionId);

            entity.Property(e => e.TermRevisionId).ValueGeneratedNever();

            entity.HasOne(d => d.TermRevision).WithOne(p => p.ContentRevisionFeedback)
                .HasForeignKey<ContentRevisionFeedback>(d => d.TermRevisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_ContentRevisionFeedback_t_ContentRevision");
        });

        modelBuilder.Entity<ContentStatus>(entity =>
        {
            entity.ToTable("ContentStatus");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContentTitleTriGram>(entity =>
        {
            entity.HasKey(e => new { e.ContentId, e.NgramId });

            entity.Property(e => e.NgramId).HasColumnName("NGramId");
            entity.Property(e => e.Ngram)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NGram");
        });

        modelBuilder.Entity<ContentType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CountryCode>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CountryCode1)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CountryCode");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeoData>(entity =>
        {
            entity.HasKey(e => e.GeoId);

            entity.Property(e => e.GeoId)
                .ValueGeneratedNever()
                .HasColumnName("GeoID");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Isp)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Organization)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.RegionCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<HeaderSpiderList>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Header)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<HelpHierarchy>(entity =>
        {
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HelpPage>(entity =>
        {
            entity.HasKey(e => e.HelpContentId);

            entity.HasIndex(e => e.EditedBy, "IX_FK_t_HelpPage_t_HelpPage_EditedBy");

            entity.HasIndex(e => e.CreatedBy, "IX_FK_t_HelpPage_t_User_CreatedBy");

            entity.Property(e => e.HelpContentId).ValueGeneratedNever();
            entity.Property(e => e.Content).IsUnicode(false);
            entity.Property(e => e.StatusChangeDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.HelpPageCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_t_HelpPage_t_User_CreatedBy");

            entity.HasOne(d => d.EditedByNavigation).WithMany(p => p.HelpPageEditedByNavigations)
                .HasForeignKey(d => d.EditedBy)
                .HasConstraintName("FK_t_HelpPage_t_HelpPage_EditedBy");

            entity.HasOne(d => d.HelpContent).WithOne(p => p.HelpPage)
                .HasForeignKey<HelpPage>(d => d.HelpContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_HelpPage_t_HelpPage_Hierarchy");
        });

        modelBuilder.Entity<HelpPhoto>(entity =>
        {
            entity.Property(e => e.HelpPhotoId).ValueGeneratedNever();
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HomePage>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.Property(e => e.ContentId).ValueGeneratedNever();

            entity.HasOne(d => d.Content).WithOne(p => p.HomePage)
                .HasForeignKey<HomePage>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_HomePage_t_Content");
        });

        modelBuilder.Entity<ImageMeta>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.Property(e => e.AltText).IsRequired();
            entity.Property(e => e.Byline).IsRequired();
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RelativeUrl)
                .IsRequired()
                .HasMaxLength(259)
                .IsUnicode(false);
            entity.Property(e => e.Source).IsRequired();
            entity.Property(e => e.Subfolder)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.UploadedBy)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasMany(d => d.TagsTags).WithMany(p => p.TImageTagAssociation1TagImages)
                .UsingEntity<Dictionary<string, object>>(
                    "TImageTagAssociation1",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_ImageTagAssociation1_Tag"),
                    l => l.HasOne<ImageMeta>().WithMany()
                        .HasForeignKey("TImageTagAssociation1TagImageId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_ImageTagAssociation1_ImageMeta"),
                    j =>
                    {
                        j.HasKey("TImageTagAssociation1TagImageId", "TagsTagId");
                        j.ToTable("t_ImageTagAssociation1");
                        j.HasIndex(new[] { "TagsTagId" }, "IX_FK_t_ImageTagAssociation1_Tag");
                        j.IndexerProperty<long>("TImageTagAssociation1TagImageId").HasColumnName("t_ImageTagAssociation1_Tag_ImageId");
                        j.IndexerProperty<int>("TagsTagId").HasColumnName("Tags_TagId");
                    });
        });

        modelBuilder.Entity<Link>(entity =>
        {
            entity.HasIndex(e => e.ContentId, "IX_FK_t_Link_t_Content");

            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LinkUrl)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Content).WithMany(p => p.Links)
                .HasForeignKey(d => d.ContentId)
                .HasConstraintName("FK_t_Link_t_Content");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Exception).IsUnicode(false);
            entity.Property(e => e.Ipaddr)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("IPAddr");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Logger)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Message)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Referrer)
                .HasMaxLength(4096)
                .IsUnicode(false);
            entity.Property(e => e.ServerName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.SessionTable).IsUnicode(false);
            entity.Property(e => e.Thread)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("URL");
            entity.Property(e => e.User)
                .HasMaxLength(4096)
                .IsUnicode(false);
            entity.Property(e => e.UserAgent)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.EditedBy)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.MessageText)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Roles)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<MetroCode>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.MetroCode1).HasColumnName("MetroCode");
            entity.Property(e => e.MetroName)
                .IsRequired()
                .HasMaxLength(60);
            entity.Property(e => e.RegionCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => new { e.RoleId, e.ContentTypeId, e.ContentStatusId });

            entity.HasIndex(e => e.ContentStatusId, "IX_FK_t_Permission_t_ContentStatus");

            entity.HasIndex(e => e.ContentTypeId, "IX_FK_t_Permission_t_ContentType");

            entity.HasOne(d => d.ContentStatus).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.ContentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Permission_t_ContentStatus");

            entity.HasOne(d => d.ContentType).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.ContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Permission_t_ContentType");

            entity.HasOne(d => d.Role).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Permission_t_Role");
        });

        modelBuilder.Entity<Plagiarism>(entity =>
        {
            entity.HasIndex(e => e.ContentContentId, "IX_FK_t_Plagiarism_t_Content");

            entity.HasIndex(e => e.RunByUserId, "IX_FK_t_Plagiarism_t_User");

            entity.Property(e => e.ContentContentId).HasColumnName("Content_ContentId");
            entity.Property(e => e.HighestMatch).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastEditedBy).HasMaxLength(200);
            entity.Property(e => e.PlagiarismCheckDate).HasColumnType("datetime");
            entity.Property(e => e.Vendor)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VendorResponse)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.ContentContent).WithMany(p => p.Plagiarisms)
                .HasForeignKey(d => d.ContentContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Plagiarism_t_Content");

            entity.HasOne(d => d.RunByUser).WithMany(p => p.Plagiarisms)
                .HasForeignKey(d => d.RunByUserId)
                .HasConstraintName("FK_t_Plagiarism_t_User");
        });

        modelBuilder.Entity<PlagiarismDetail>(entity =>
        {
            entity.HasKey(e => e.PlagiarismMatchId);

            entity.HasIndex(e => e.PlagiarismId, "IX_FK_t_PlagiarismDetail_t_Plagiarism");

            entity.Property(e => e.HtmlSnippet).IsUnicode(false);
            entity.Property(e => e.PercentageMatch).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SourceTitle)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SourceUrl)
                .IsRequired()
                .HasMaxLength(2084)
                .IsUnicode(false);
            entity.Property(e => e.TextSnippet).IsUnicode(false);

            entity.HasOne(d => d.Plagiarism).WithMany(p => p.PlagiarismDetails)
                .HasForeignKey(d => d.PlagiarismId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_PlagiarismDetail_t_Plagiarism");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.AuthorRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuthorUrl)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ClosestCity).HasMaxLength(50);
            entity.Property(e => e.ClosestCountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClosestRegion).HasMaxLength(50);
            entity.Property(e => e.ClosestZipCode)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.ContributorUrl)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Culture).HasMaxLength(5);
            entity.Property(e => e.EmployerName).HasMaxLength(255);
            entity.Property(e => e.FacebookUsername).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Industry).HasMaxLength(100);
            entity.Property(e => e.JobFunction).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.LinkedUsername).HasMaxLength(50);
            entity.Property(e => e.RatePerArticle).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RatePerTerm).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RemoteIp)
                .HasMaxLength(39)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SocialFacebook)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.SocialGooglePlus)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.SocialLinkedIn)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.SocialTwitter)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.TwitterUsername).HasMaxLength(50);

            entity.HasOne(d => d.User).WithOne(p => p.Profile)
                .HasForeignKey<Profile>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Profile_t_User1");
        });

        modelBuilder.Entity<ProfileOption>(entity =>
        {
            entity.HasKey(e => e.OptionId);

            entity.Property(e => e.OptionId).ValueGeneratedNever();
        });

        modelBuilder.Entity<ProfileSerial>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithOne(p => p.ProfileSerial)
                .HasForeignKey<ProfileSerial>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_ProfileSerial_t_User");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.HasIndex(e => e.UserUserId, "IX_FK_t_Question_t_User");

            entity.Property(e => e.ContentId).ValueGeneratedNever();
            entity.Property(e => e.Answer)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Question1)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Question");
            entity.Property(e => e.UserUserId).HasColumnName("User_UserId");

            entity.HasOne(d => d.Content).WithOne(p => p.Question)
                .HasForeignKey<Question>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Question_t_Content");

            entity.HasOne(d => d.UserUser).WithMany(p => p.Questions)
                .HasForeignKey(d => d.UserUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Question_t_User");
        });

        modelBuilder.Entity<Quote>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.Property(e => e.ContentId).ValueGeneratedNever();
            entity.Property(e => e.Importance)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Origin)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Quote1)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Quote");
            entity.Property(e => e.Source)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Content).WithOne(p => p.Quote)
                .HasForeignKey<Quote>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Quote_t_Content");
        });

        modelBuilder.Entity<RegionCode>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RegionCode1)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RegionCode");
            entity.Property(e => e.RegionName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasIndex(e => e.ApplicationApplicationId, "IX_FK_t_Role_t_Applications");

            entity.Property(e => e.RoleId).ValueGeneratedNever();
            entity.Property(e => e.ApplicationApplicationId).HasColumnName("Application_ApplicationId");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.ApplicationApplication).WithMany(p => p.Roles)
                .HasForeignKey(d => d.ApplicationApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Role_t_Applications");

            entity.HasMany(d => d.UsersUsers).WithMany(p => p.RolesRoles)
                .UsingEntity<Dictionary<string, object>>(
                    "TUsersInRole",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_UsersInRole_t_User"),
                    l => l.HasOne<Role>().WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_UsersInRole_t_Role"),
                    j =>
                    {
                        j.HasKey("RolesRoleId", "UsersUserId");
                        j.ToTable("t_UsersInRole");
                        j.HasIndex(new[] { "UsersUserId" }, "IX_FK_t_UsersInRole_t_User");
                        j.IndexerProperty<Guid>("RolesRoleId").HasColumnName("Roles_RoleId");
                        j.IndexerProperty<Guid>("UsersUserId").HasColumnName("Users_UserId");
                    });
        });

        modelBuilder.Entity<SearchLog>(entity =>
        {
            entity.Property(e => e.AddedDate).HasColumnType("datetime");
            entity.Property(e => e.Query).HasMaxLength(255);
            entity.Property(e => e.Referer).HasMaxLength(255);
        });

        modelBuilder.Entity<SearchTypeLog>(entity =>
        {
            entity.HasKey(e => new { e.SearchLogId, e.ContentTypeId });

            entity.HasIndex(e => e.ContentTypeId, "IX_FK_t_SearchTypeLog_t_ContentType");

            entity.HasOne(d => d.ContentType).WithMany(p => p.SearchTypeLogs)
                .HasForeignKey(d => d.ContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_SearchTypeLog_t_ContentType");

            entity.HasOne(d => d.SearchLog).WithMany(p => p.SearchTypeLogs)
                .HasForeignKey(d => d.SearchLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_SearchTypeLog_t_SearchLog");
        });

        modelBuilder.Entity<StyleError>(entity =>
        {
            entity.HasIndex(e => e.StyleId, "IX_FK_t_StyleGuide_t_StyleErrors");

            entity.Property(e => e.StyleErrorId).ValueGeneratedNever();
            entity.Property(e => e.LastEditDate).HasColumnType("datetime");
            entity.Property(e => e.StyleErrorItem).IsUnicode(false);

            entity.HasOne(d => d.Style).WithMany(p => p.StyleErrors)
                .HasForeignKey(d => d.StyleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_StyleGuide_t_StyleErrors");
        });

        modelBuilder.Entity<StyleGuide>(entity =>
        {
            entity.HasKey(e => e.StyleId);

            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.LastEditDate).HasColumnType("datetime");
            entity.Property(e => e.StyleItem).IsUnicode(false);
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.Property(e => e.AddedBy)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.FriendlyDisplay)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.UserUsers).WithMany(p => p.TagsTags)
                .UsingEntity<Dictionary<string, object>>(
                    "TUserTag",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserUserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_User_Tag_t_User"),
                    l => l.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_t_User_Tag_t_Tag"),
                    j =>
                    {
                        j.HasKey("TagsTagId", "UserUserId");
                        j.ToTable("t_User_Tag");
                        j.HasIndex(new[] { "UserUserId" }, "IX_FK_t_User_Tag_t_User");
                        j.IndexerProperty<int>("TagsTagId").HasColumnName("Tags_TagId");
                        j.IndexerProperty<Guid>("UserUserId").HasColumnName("User_UserId");
                    });
        });

        modelBuilder.Entity<TagNameTriGram>(entity =>
        {
            entity.HasKey(e => new { e.TagId, e.NgramId });

            entity.Property(e => e.NgramId).HasColumnName("NGramId");
            entity.Property(e => e.Ngram)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NGram");
        });

        modelBuilder.Entity<TagRelatedTag>(entity =>
        {
            entity.HasIndex(e => e.RelatedTagTagId, "IX_FK_t_Tag_RelatedTag_t_Tag");

            entity.HasIndex(e => e.TagTagId, "IX_FK_t_Tag_RelatedTag_t_Tag1");

            entity.Property(e => e.RelatedTagTagId).HasColumnName("RelatedTag_TagId");
            entity.Property(e => e.TagTagId).HasColumnName("Tag_TagId");

            entity.HasOne(d => d.RelatedTagTag).WithMany(p => p.TagRelatedTagRelatedTagTags)
                .HasForeignKey(d => d.RelatedTagTagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Tag_RelatedTag_t_Tag");

            entity.HasOne(d => d.TagTag).WithMany(p => p.TagRelatedTagTagTags)
                .HasForeignKey(d => d.TagTagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Tag_RelatedTag_t_Tag1");
        });

        modelBuilder.Entity<TagSynonym>(entity =>
        {
            entity.HasKey(e => e.SynonymId);

            entity.HasIndex(e => e.TagTagId, "IX_FK_t_Tag_t_TagSynonym_FK1");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TagTagId).HasColumnName("Tag_TagId");

            entity.HasOne(d => d.TagTag).WithMany(p => p.TagSynonyms)
                .HasForeignKey(d => d.TagTagId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Tag_t_TagSynonym_FK1");
        });

        modelBuilder.Entity<Term>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.Property(e => e.ContentId).ValueGeneratedNever();
            entity.Property(e => e.Acronym).IsUnicode(false);
            entity.Property(e => e.Context)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Definition)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Explanation)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Content).WithOne(p => p.Term)
                .HasForeignKey<Term>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Term_t_Content");
        });

        modelBuilder.Entity<TermOfDay>(entity =>
        {
            entity.HasKey(e => e.TodId);

            entity.HasIndex(e => e.ContentId, "IX_FK_t_TermOfDay_t_Content");

            entity.Property(e => e.TodId).ValueGeneratedNever();
            entity.Property(e => e.PublishedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Content).WithMany(p => p.TermOfDays)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_TermOfDay_t_Content");
        });

        modelBuilder.Entity<TermSynonym>(entity =>
        {
            entity.HasKey(e => e.SynonymId);

            entity.HasIndex(e => e.TermId, "IX_FK_TermSynonymTerm");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Term).WithMany(p => p.TermSynonyms)
                .HasForeignKey(d => d.TermId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TermSynonymTerm");
        });

        modelBuilder.Entity<Tutorial>(entity =>
        {
            entity.HasKey(e => e.ContentId);

            entity.HasIndex(e => e.AuthorId, "IX_FK_t_Tutorial_t_User");

            entity.Property(e => e.ContentId).ValueGeneratedNever();
            entity.Property(e => e.PdfLink).IsUnicode(false);

            entity.HasOne(d => d.Author).WithMany(p => p.Tutorials)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Tutorial_t_User");

            entity.HasOne(d => d.Content).WithOne(p => p.Tutorial)
                .HasForeignKey<Tutorial>(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Tutorial_t_Content");
        });

        modelBuilder.Entity<TutorialDetail>(entity =>
        {
            entity.HasKey(e => e.DetailsId);

            entity.HasIndex(e => e.ContentId, "IX_FK_t_TutorialDetails_t_Tutorial");

            entity.Property(e => e.Body).IsRequired();
            entity.Property(e => e.Htmltitle)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("HTMLTitle");
            entity.Property(e => e.Sources)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Content).WithMany(p => p.TutorialDetails)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_TutorialDetails_t_Tutorial");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.ApplicationApplicationId, "IX_FK_t_User_t_Applications");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.ApplicationApplicationId).HasColumnName("Application_ApplicationId");
            entity.Property(e => e.Comment).HasMaxLength(200);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
            entity.Property(e => e.LastLockedOutDate).HasColumnType("datetime");
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PasswordAnswer).HasMaxLength(200);
            entity.Property(e => e.PasswordQuestion).HasMaxLength(200);
            entity.Property(e => e.PasswordSalt).HasMaxLength(100);
            entity.Property(e => e.PublicId).ValueGeneratedOnAdd();
            entity.Property(e => e.Username).HasMaxLength(200);

            entity.HasOne(d => d.ApplicationApplication).WithMany(p => p.Users)
                .HasForeignKey(d => d.ApplicationApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_User_t_Applications");
        });

        modelBuilder.Entity<ViewDetail>(entity =>
        {
            entity.HasKey(e => e.ViewDetailsId);

            entity.HasIndex(e => e.ContentId, "IX_FK_t_Content_t_ViewDetails_FK1");

            entity.Property(e => e.ActivityDate).HasColumnType("datetime");
            entity.Property(e => e.Browser).HasMaxLength(150);
            entity.Property(e => e.BrowserName).HasMaxLength(100);
            entity.Property(e => e.BrowserPlatform).HasMaxLength(40);
            entity.Property(e => e.BrowserVersion).HasMaxLength(40);
            entity.Property(e => e.GeoId).HasColumnName("GeoID");
            entity.Property(e => e.RemoteIp)
                .IsRequired()
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("RemoteIP");
            entity.Property(e => e.RequestMethod)
                .IsRequired()
                .HasMaxLength(4);
            entity.Property(e => e.UserAgent).HasMaxLength(255);

            entity.HasOne(d => d.Content).WithMany(p => p.ViewDetails)
                .HasForeignKey(d => d.ContentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t_Content_t_ViewDetails_FK1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}